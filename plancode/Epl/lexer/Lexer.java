/* This file was generated by SableCC (http://www.sablecc.org/). */

package Epl.lexer;

import java.io.*;
import java.util.*;
import Epl.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("Unable to read lexer.dat.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TFloatingConstant(text, line, pos); }
    Token new1(int line, int pos) { return new TFrozen(line, pos); }
    Token new2(int line, int pos) { return new TTech(line, pos); }
    Token new3(int line, int pos) { return new TRes(line, pos); }
    Token new4(int line, int pos) { return new TTarg(line, pos); }
    Token new5(int line, int pos) { return new TNonft(line, pos); }
    Token new6(int line, int pos) { return new TNonpt(line, pos); }
    Token new7(int line, int pos) { return new TBra(line, pos); }
    Token new8(int line, int pos) { return new TKet(line, pos); }
    Token new9(int line, int pos) { return new TSemicolon(line, pos); }
    Token new10(int line, int pos) { return new TArrow(line, pos); }
    Token new11(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new12(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new13(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TCodecomment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {45, 45, 6}, {46, 46, 7}, {47, 47, 8}, {48, 57, 9}, {59, 59, 10}, {65, 69, 11}, {70, 70, 12}, {71, 77, 11}, {78, 78, 13}, {79, 81, 11}, {82, 82, 14}, {83, 83, 11}, {84, 84, 15}, {85, 90, 11}, {91, 91, 16}, {93, 93, 17}, {97, 122, 11}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{42, 42, 18}, },
            {{62, 62, 19}, },
            {{48, 57, 20}, },
            {{42, 42, 21}, },
            {{46, 46, 22}, {48, 57, 9}, {69, 69, 23}, {101, 101, 24}, },
            {},
            {{48, 57, 25}, {65, 90, 25}, {95, 95, 26}, {97, 122, 25}, },
            {{48, 95, -13}, {97, 113, 25}, {114, 114, 27}, {115, 122, 25}, },
            {{48, 95, -13}, {97, 110, 25}, {111, 111, 28}, {112, 122, 25}, },
            {{48, 95, -13}, {97, 100, 25}, {101, 101, 29}, {102, 122, 25}, },
            {{48, 95, -13}, {97, 97, 30}, {98, 100, 25}, {101, 101, 31}, {102, 122, 25}, },
            {},
            {},
            {{0, 41, 32}, {42, 42, 33}, {43, 127, 32}, },
            {},
            {{48, 57, 20}, {69, 69, 34}, {70, 70, 35}, {76, 76, 36}, {101, 101, 37}, {102, 102, 38}, {108, 108, 39}, },
            {{0, 41, 40}, {42, 42, 41}, {43, 127, 40}, },
            {{48, 108, -22}, },
            {{43, 43, 42}, {45, 45, 43}, {48, 57, 44}, },
            {{43, 57, -25}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 110, -15}, {111, 111, 45}, {112, 122, 25}, },
            {{48, 95, -13}, {97, 109, 25}, {110, 110, 46}, {111, 122, 25}, },
            {{48, 95, -13}, {97, 114, 25}, {115, 115, 47}, {116, 122, 25}, },
            {{48, 113, -14}, {114, 114, 48}, {115, 122, 25}, },
            {{48, 95, -13}, {97, 98, 25}, {99, 99, 49}, {100, 122, 25}, },
            {{0, 127, -20}, },
            {{0, 40, 50}, {41, 41, 51}, {42, 42, 33}, {43, 127, 50}, },
            {{43, 43, 52}, {45, 45, 53}, {48, 57, 54}, },
            {},
            {},
            {{43, 57, -36}, },
            {},
            {},
            {{0, 127, -23}, },
            {{0, 41, 55}, {42, 42, 41}, {43, 46, 55}, {47, 47, 56}, {48, 127, 55}, },
            {{48, 57, 44}, },
            {{48, 57, 44}, },
            {{48, 57, 44}, {70, 70, 57}, {76, 76, 58}, {102, 102, 59}, {108, 108, 60}, },
            {{48, 95, -13}, {97, 121, 25}, {122, 122, 61}, },
            {{48, 95, -13}, {97, 101, 25}, {102, 102, 62}, {103, 111, 25}, {112, 112, 63}, {113, 122, 25}, },
            {{48, 110, -15}, {111, 111, 64}, {112, 122, 25}, },
            {{48, 95, -13}, {97, 102, 25}, {103, 103, 65}, {104, 122, 25}, },
            {{48, 95, -13}, {97, 103, 25}, {104, 104, 66}, {105, 122, 25}, },
            {{0, 41, 67}, {42, 42, 68}, {43, 127, 67}, },
            {},
            {{48, 57, 54}, },
            {{48, 57, 54}, },
            {{48, 57, 54}, {70, 76, -22}, {102, 108, -22}, },
            {{0, 41, 69}, {42, 42, 70}, {43, 127, 69}, },
            {},
            {},
            {},
            {},
            {},
            {{48, 100, -16}, {101, 101, 71}, {102, 122, 25}, },
            {{48, 95, -13}, {97, 104, 25}, {105, 105, 72}, {106, 122, 25}, },
            {{48, 113, -14}, {114, 114, 73}, {115, 122, 25}, },
            {{48, 95, -13}, {97, 116, 25}, {117, 117, 74}, {118, 122, 25}, },
            {{48, 100, -16}, {101, 101, 75}, {102, 122, 25}, },
            {{48, 109, -30}, {110, 110, 76}, {111, 122, 25}, },
            {{0, 127, -52}, },
            {{0, 41, -35}, {42, 42, 68}, {43, 127, 50}, },
            {{0, 127, -57}, },
            {{0, 41, 55}, {42, 42, 70}, {43, 127, -43}, },
            {{48, 109, -30}, {110, 110, 77}, {111, 122, 25}, },
            {{48, 109, -30}, {110, 110, 78}, {111, 122, 25}, },
            {{48, 110, -15}, {111, 111, 79}, {112, 122, 25}, },
            {{48, 113, -14}, {114, 114, 80}, {115, 122, 25}, },
            {{48, 95, -13}, {97, 115, 25}, {116, 116, 81}, {117, 122, 25}, },
            {{48, 104, -64}, {105, 105, 82}, {106, 122, 25}, },
            {{48, 122, -13}, },
            {{48, 95, -13}, {97, 97, 83}, {98, 122, 25}, },
            {{48, 95, -13}, {97, 99, 25}, {100, 100, 84}, {101, 122, 25}, },
            {{48, 98, -33}, {99, 99, 85}, {100, 122, 25}, },
            {{48, 122, -13}, },
            {{48, 95, -13}, {97, 112, 25}, {113, 113, 86}, {114, 122, 25}, },
            {{48, 95, -13}, {97, 107, 25}, {108, 108, 87}, {109, 122, 25}, },
            {{48, 116, -66}, {117, 117, 88}, {118, 122, 25}, },
            {{48, 100, -16}, {101, 101, 89}, {102, 122, 25}, },
            {{48, 116, -66}, {117, 117, 90}, {118, 122, 25}, },
            {{48, 122, -13}, },
            {{48, 98, -33}, {99, 99, 91}, {100, 122, 25}, },
            {{48, 122, -13}, },
            {{48, 100, -16}, {101, 101, 92}, {102, 122, 25}, },
            {{48, 100, -16}, {101, 101, 93}, {102, 122, 25}, },
            {{48, 122, -13}, },
            {{48, 99, -81}, {100, 100, 94}, {101, 122, 25}, },
            {{48, 122, -13}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 12, 12, 12, 12, -1, -1, -1, -1, 0, 9, 11, 11, 11, 11, 11, 7, 8, -1, 10, 0, -1, 0, -1, -1, 11, 11, 11, 11, 11, 11, 11, -1, -1, -1, 0, 0, -1, 0, 0, -1, -1, -1, -1, 0, 11, 11, 11, 11, 11, -1, 14, -1, -1, 0, -1, 13, 0, 0, 0, 0, 11, 11, 11, 11, 11, 11, -1, -1, -1, -1, 11, 11, 11, 11, 11, 11, 1, 11, 11, 11, 4, 11, 11, 11, 11, 11, 5, 11, 3, 11, 11, 2, 11, 6, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
