/* This file was generated by SableCC (http://www.sablecc.org/). */

package Epl.node;

import java.util.*;
import Epl.analysis.*;

public final class ANonfin extends PNonfin
{
    private TNonft _nonft_;
    private TBra _bra_;
    private final LinkedList _nonf_ = new TypedLinkedList(new Nonf_Cast());
    private TKet _ket_;

    public ANonfin()
    {
    }

    public ANonfin(
        TNonft _nonft_,
        TBra _bra_,
        List _nonf_,
        TKet _ket_)
    {
        setNonft(_nonft_);

        setBra(_bra_);

        {
            Object temp[] = _nonf_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._nonf_.add(temp[i]);
            }
        }

        setKet(_ket_);

    }

    public ANonfin(
        TNonft _nonft_,
        TBra _bra_,
        XPNonf _nonf_,
        TKet _ket_)
    {
        setNonft(_nonft_);

        setBra(_bra_);

        if(_nonf_ != null)
        {
            while(_nonf_ instanceof X1PNonf)
            {
                this._nonf_.addFirst(((X1PNonf) _nonf_).getPNonf());
                _nonf_ = ((X1PNonf) _nonf_).getXPNonf();
            }
            this._nonf_.addFirst(((X2PNonf) _nonf_).getPNonf());
        }

        setKet(_ket_);

    }
    public Object clone()
    {
        return new ANonfin(
            (TNonft) cloneNode(_nonft_),
            (TBra) cloneNode(_bra_),
            cloneList(_nonf_),
            (TKet) cloneNode(_ket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANonfin(this);
    }

    public TNonft getNonft()
    {
        return _nonft_;
    }

    public void setNonft(TNonft node)
    {
        if(_nonft_ != null)
        {
            _nonft_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _nonft_ = node;
    }

    public TBra getBra()
    {
        return _bra_;
    }

    public void setBra(TBra node)
    {
        if(_bra_ != null)
        {
            _bra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bra_ = node;
    }

    public LinkedList getNonf()
    {
        return _nonf_;
    }

    public void setNonf(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _nonf_.add(temp[i]);
        }
    }

    public TKet getKet()
    {
        return _ket_;
    }

    public void setKet(TKet node)
    {
        if(_ket_ != null)
        {
            _ket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ket_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_nonft_)
            + toString(_bra_)
            + toString(_nonf_)
            + toString(_ket_);
    }

    void removeChild(Node child)
    {
        if(_nonft_ == child)
        {
            _nonft_ = null;
            return;
        }

        if(_bra_ == child)
        {
            _bra_ = null;
            return;
        }

        if(_nonf_.remove(child))
        {
            return;
        }

        if(_ket_ == child)
        {
            _ket_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_nonft_ == oldChild)
        {
            setNonft((TNonft) newChild);
            return;
        }

        if(_bra_ == oldChild)
        {
            setBra((TBra) newChild);
            return;
        }

        for(ListIterator i = _nonf_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_ket_ == oldChild)
        {
            setKet((TKet) newChild);
            return;
        }

    }

    private class Nonf_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PNonf node = (PNonf) o;

            if((node.parent() != null) &&
                (node.parent() != ANonfin.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ANonfin.this))
            {
                node.parent(ANonfin.this);
            }

            return node;
        }
    }
}
