/* This file was generated by SableCC (http://www.sablecc.org/). */

package Epl.node;

import java.util.*;
import Epl.analysis.*;

public final class ABralist extends PBralist
{
    private TBra _bra_;
    private PList _list_;
    private TKet _ket_;

    public ABralist()
    {
    }

    public ABralist(
        TBra _bra_,
        PList _list_,
        TKet _ket_)
    {
        setBra(_bra_);

        setList(_list_);

        setKet(_ket_);

    }
    public Object clone()
    {
        return new ABralist(
            (TBra) cloneNode(_bra_),
            (PList) cloneNode(_list_),
            (TKet) cloneNode(_ket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABralist(this);
    }

    public TBra getBra()
    {
        return _bra_;
    }

    public void setBra(TBra node)
    {
        if(_bra_ != null)
        {
            _bra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bra_ = node;
    }

    public PList getList()
    {
        return _list_;
    }

    public void setList(PList node)
    {
        if(_list_ != null)
        {
            _list_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _list_ = node;
    }

    public TKet getKet()
    {
        return _ket_;
    }

    public void setKet(TKet node)
    {
        if(_ket_ != null)
        {
            _ket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ket_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_bra_)
            + toString(_list_)
            + toString(_ket_);
    }

    void removeChild(Node child)
    {
        if(_bra_ == child)
        {
            _bra_ = null;
            return;
        }

        if(_list_ == child)
        {
            _list_ = null;
            return;
        }

        if(_ket_ == child)
        {
            _ket_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_bra_ == oldChild)
        {
            setBra((TBra) newChild);
            return;
        }

        if(_list_ == oldChild)
        {
            setList((PList) newChild);
            return;
        }

        if(_ket_ == oldChild)
        {
            setKet((TKet) newChild);
            return;
        }

    }
}
