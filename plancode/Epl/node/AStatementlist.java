/* This file was generated by SableCC (http://www.sablecc.org/). */

package Epl.node;

import java.util.*;
import Epl.analysis.*;

public final class AStatementlist extends PStatementlist
{
    private PStatement _statement_;
    private TSemicolon _semicolon_;
    private final LinkedList _statements_ = new TypedLinkedList(new Statements_Cast());

    public AStatementlist()
    {
    }

    public AStatementlist(
        PStatement _statement_,
        TSemicolon _semicolon_,
        List _statements_)
    {
        setStatement(_statement_);

        setSemicolon(_semicolon_);

        {
            Object temp[] = _statements_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._statements_.add(temp[i]);
            }
        }

    }

    public AStatementlist(
        PStatement _statement_,
        TSemicolon _semicolon_,
        XPStatements _statements_)
    {
        setStatement(_statement_);

        setSemicolon(_semicolon_);

        if(_statements_ != null)
        {
            while(_statements_ instanceof X1PStatements)
            {
                this._statements_.addFirst(((X1PStatements) _statements_).getPStatements());
                _statements_ = ((X1PStatements) _statements_).getXPStatements();
            }
            this._statements_.addFirst(((X2PStatements) _statements_).getPStatements());
        }

    }
    public Object clone()
    {
        return new AStatementlist(
            (PStatement) cloneNode(_statement_),
            (TSemicolon) cloneNode(_semicolon_),
            cloneList(_statements_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStatementlist(this);
    }

    public PStatement getStatement()
    {
        return _statement_;
    }

    public void setStatement(PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statement_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public LinkedList getStatements()
    {
        return _statements_;
    }

    public void setStatements(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _statements_.add(temp[i]);
        }
    }

    public String toString()
    {
        return ""
            + toString(_statement_)
            + toString(_semicolon_)
            + toString(_statements_);
    }

    void removeChild(Node child)
    {
        if(_statement_ == child)
        {
            _statement_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

        if(_statements_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        for(ListIterator i = _statements_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Statements_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PStatements node = (PStatements) o;

            if((node.parent() != null) &&
                (node.parent() != AStatementlist.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AStatementlist.this))
            {
                node.parent(AStatementlist.this);
            }

            return node;
        }
    }
}
