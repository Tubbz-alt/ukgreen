/* This file was generated by SableCC (http://www.sablecc.org/). */

package Epl.node;

import java.util.*;
import Epl.analysis.*;

public final class ANonprod extends PNonprod
{
    private TNonpt _nonpt_;
    private TBra _bra_;
    private final LinkedList _nonp_ = new TypedLinkedList(new Nonp_Cast());
    private TKet _ket_;

    public ANonprod()
    {
    }

    public ANonprod(
        TNonpt _nonpt_,
        TBra _bra_,
        List _nonp_,
        TKet _ket_)
    {
        setNonpt(_nonpt_);

        setBra(_bra_);

        {
            Object temp[] = _nonp_.toArray();
            for(int i = 0; i < temp.length; i++)
            {
                this._nonp_.add(temp[i]);
            }
        }

        setKet(_ket_);

    }

    public ANonprod(
        TNonpt _nonpt_,
        TBra _bra_,
        XPNonp _nonp_,
        TKet _ket_)
    {
        setNonpt(_nonpt_);

        setBra(_bra_);

        if(_nonp_ != null)
        {
            while(_nonp_ instanceof X1PNonp)
            {
                this._nonp_.addFirst(((X1PNonp) _nonp_).getPNonp());
                _nonp_ = ((X1PNonp) _nonp_).getXPNonp();
            }
            this._nonp_.addFirst(((X2PNonp) _nonp_).getPNonp());
        }

        setKet(_ket_);

    }
    public Object clone()
    {
        return new ANonprod(
            (TNonpt) cloneNode(_nonpt_),
            (TBra) cloneNode(_bra_),
            cloneList(_nonp_),
            (TKet) cloneNode(_ket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANonprod(this);
    }

    public TNonpt getNonpt()
    {
        return _nonpt_;
    }

    public void setNonpt(TNonpt node)
    {
        if(_nonpt_ != null)
        {
            _nonpt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _nonpt_ = node;
    }

    public TBra getBra()
    {
        return _bra_;
    }

    public void setBra(TBra node)
    {
        if(_bra_ != null)
        {
            _bra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bra_ = node;
    }

    public LinkedList getNonp()
    {
        return _nonp_;
    }

    public void setNonp(List list)
    {
        Object temp[] = list.toArray();
        for(int i = 0; i < temp.length; i++)
        {
            _nonp_.add(temp[i]);
        }
    }

    public TKet getKet()
    {
        return _ket_;
    }

    public void setKet(TKet node)
    {
        if(_ket_ != null)
        {
            _ket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ket_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_nonpt_)
            + toString(_bra_)
            + toString(_nonp_)
            + toString(_ket_);
    }

    void removeChild(Node child)
    {
        if(_nonpt_ == child)
        {
            _nonpt_ = null;
            return;
        }

        if(_bra_ == child)
        {
            _bra_ = null;
            return;
        }

        if(_nonp_.remove(child))
        {
            return;
        }

        if(_ket_ == child)
        {
            _ket_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_nonpt_ == oldChild)
        {
            setNonpt((TNonpt) newChild);
            return;
        }

        if(_bra_ == oldChild)
        {
            setBra((TBra) newChild);
            return;
        }

        for(ListIterator i = _nonp_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_ket_ == oldChild)
        {
            setKet((TKet) newChild);
            return;
        }

    }

    private class Nonp_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PNonp node = (PNonp) o;

            if((node.parent() != null) &&
                (node.parent() != ANonprod.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ANonprod.this))
            {
                node.parent(ANonprod.this);
            }

            return node;
        }
    }
}
