/* This file was generated by SableCC (http://www.sablecc.org/). */

package Epl.analysis;

import java.util.*;
import Epl.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getStatementlist() != null)
        {
            node.getStatementlist().apply(this);
        }
        outAProgram(node);
    }

    public void inABralist(ABralist node)
    {
        defaultIn(node);
    }

    public void outABralist(ABralist node)
    {
        defaultOut(node);
    }

    public void caseABralist(ABralist node)
    {
        inABralist(node);
        if(node.getBra() != null)
        {
            node.getBra().apply(this);
        }
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getKet() != null)
        {
            node.getKet().apply(this);
        }
        outABralist(node);
    }

    public void inAList(AList node)
    {
        defaultIn(node);
    }

    public void outAList(AList node)
    {
        defaultOut(node);
    }

    public void caseAList(AList node)
    {
        inAList(node);
        if(node.getHead() != null)
        {
            node.getHead().apply(this);
        }
        {
            Object temp[] = node.getAtom().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PAtom) temp[i]).apply(this);
            }
        }
        outAList(node);
    }

    public void inAHead(AHead node)
    {
        defaultIn(node);
    }

    public void outAHead(AHead node)
    {
        defaultOut(node);
    }

    public void caseAHead(AHead node)
    {
        inAHead(node);
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAHead(node);
    }

    public void inANonf(ANonf node)
    {
        defaultIn(node);
    }

    public void outANonf(ANonf node)
    {
        defaultOut(node);
    }

    public void caseANonf(ANonf node)
    {
        inANonf(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outANonf(node);
    }

    public void inANonp(ANonp node)
    {
        defaultIn(node);
    }

    public void outANonp(ANonp node)
    {
        defaultOut(node);
    }

    public void caseANonp(ANonp node)
    {
        inANonp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outANonp(node);
    }

    public void inANonfin(ANonfin node)
    {
        defaultIn(node);
    }

    public void outANonfin(ANonfin node)
    {
        defaultOut(node);
    }

    public void caseANonfin(ANonfin node)
    {
        inANonfin(node);
        if(node.getNonft() != null)
        {
            node.getNonft().apply(this);
        }
        if(node.getBra() != null)
        {
            node.getBra().apply(this);
        }
        {
            Object temp[] = node.getNonf().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PNonf) temp[i]).apply(this);
            }
        }
        if(node.getKet() != null)
        {
            node.getKet().apply(this);
        }
        outANonfin(node);
    }

    public void inANonprod(ANonprod node)
    {
        defaultIn(node);
    }

    public void outANonprod(ANonprod node)
    {
        defaultOut(node);
    }

    public void caseANonprod(ANonprod node)
    {
        inANonprod(node);
        if(node.getNonpt() != null)
        {
            node.getNonpt().apply(this);
        }
        if(node.getBra() != null)
        {
            node.getBra().apply(this);
        }
        {
            Object temp[] = node.getNonp().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PNonp) temp[i]).apply(this);
            }
        }
        if(node.getKet() != null)
        {
            node.getKet().apply(this);
        }
        outANonprod(node);
    }

    public void inAAtom(AAtom node)
    {
        defaultIn(node);
    }

    public void outAAtom(AAtom node)
    {
        defaultOut(node);
    }

    public void caseAAtom(AAtom node)
    {
        inAAtom(node);
        if(node.getFloatingConstant() != null)
        {
            node.getFloatingConstant().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAtom(node);
    }

    public void inATarget(ATarget node)
    {
        defaultIn(node);
    }

    public void outATarget(ATarget node)
    {
        defaultOut(node);
    }

    public void caseATarget(ATarget node)
    {
        inATarget(node);
        if(node.getTarg() != null)
        {
            node.getTarg().apply(this);
        }
        if(node.getBralist() != null)
        {
            node.getBralist().apply(this);
        }
        outATarget(node);
    }

    public void inAResource(AResource node)
    {
        defaultIn(node);
    }

    public void outAResource(AResource node)
    {
        defaultOut(node);
    }

    public void caseAResource(AResource node)
    {
        inAResource(node);
        if(node.getRes() != null)
        {
            node.getRes().apply(this);
        }
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAResource(node);
    }

    public void inATechnique(ATechnique node)
    {
        defaultIn(node);
    }

    public void outATechnique(ATechnique node)
    {
        defaultOut(node);
    }

    public void caseATechnique(ATechnique node)
    {
        inATechnique(node);
        if(node.getTech() != null)
        {
            node.getTech().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBralist() != null)
        {
            node.getBralist().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getProduct() != null)
        {
            node.getProduct().apply(this);
        }
        outATechnique(node);
    }

    public void inAProduct(AProduct node)
    {
        defaultIn(node);
    }

    public void outAProduct(AProduct node)
    {
        defaultOut(node);
    }

    public void caseAProduct(AProduct node)
    {
        inAProduct(node);
        if(node.getProducttail() != null)
        {
            node.getProducttail().apply(this);
        }
        outAProduct(node);
    }

    public void inAProducttail(AProducttail node)
    {
        defaultIn(node);
    }

    public void outAProducttail(AProducttail node)
    {
        defaultOut(node);
    }

    public void caseAProducttail(AProducttail node)
    {
        inAProducttail(node);
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAProducttail(node);
    }

    public void inAJointProducttail(AJointProducttail node)
    {
        defaultIn(node);
    }

    public void outAJointProducttail(AJointProducttail node)
    {
        defaultOut(node);
    }

    public void caseAJointProducttail(AJointProducttail node)
    {
        inAJointProducttail(node);
        if(node.getBralist() != null)
        {
            node.getBralist().apply(this);
        }
        outAJointProducttail(node);
    }

    public void inAResstatStatement(AResstatStatement node)
    {
        defaultIn(node);
    }

    public void outAResstatStatement(AResstatStatement node)
    {
        defaultOut(node);
    }

    public void caseAResstatStatement(AResstatStatement node)
    {
        inAResstatStatement(node);
        if(node.getResource() != null)
        {
            node.getResource().apply(this);
        }
        outAResstatStatement(node);
    }

    public void inATechstatStatement(ATechstatStatement node)
    {
        defaultIn(node);
    }

    public void outATechstatStatement(ATechstatStatement node)
    {
        defaultOut(node);
    }

    public void caseATechstatStatement(ATechstatStatement node)
    {
        inATechstatStatement(node);
        if(node.getTechnique() != null)
        {
            node.getTechnique().apply(this);
        }
        outATechstatStatement(node);
    }

    public void inAFtechstatStatement(AFtechstatStatement node)
    {
        defaultIn(node);
    }

    public void outAFtechstatStatement(AFtechstatStatement node)
    {
        defaultOut(node);
    }

    public void caseAFtechstatStatement(AFtechstatStatement node)
    {
        inAFtechstatStatement(node);
        if(node.getFrozen() != null)
        {
            node.getFrozen().apply(this);
        }
        if(node.getTechnique() != null)
        {
            node.getTechnique().apply(this);
        }
        outAFtechstatStatement(node);
    }

    public void inATargstatStatement(ATargstatStatement node)
    {
        defaultIn(node);
    }

    public void outATargstatStatement(ATargstatStatement node)
    {
        defaultOut(node);
    }

    public void caseATargstatStatement(ATargstatStatement node)
    {
        inATargstatStatement(node);
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        outATargstatStatement(node);
    }

    public void inAFinalstatStatement(AFinalstatStatement node)
    {
        defaultIn(node);
    }

    public void outAFinalstatStatement(AFinalstatStatement node)
    {
        defaultOut(node);
    }

    public void caseAFinalstatStatement(AFinalstatStatement node)
    {
        inAFinalstatStatement(node);
        if(node.getNonfin() != null)
        {
            node.getNonfin().apply(this);
        }
        outAFinalstatStatement(node);
    }

    public void inAProdstatStatement(AProdstatStatement node)
    {
        defaultIn(node);
    }

    public void outAProdstatStatement(AProdstatStatement node)
    {
        defaultOut(node);
    }

    public void caseAProdstatStatement(AProdstatStatement node)
    {
        inAProdstatStatement(node);
        if(node.getNonprod() != null)
        {
            node.getNonprod().apply(this);
        }
        outAProdstatStatement(node);
    }

    public void inAStatementlist(AStatementlist node)
    {
        defaultIn(node);
    }

    public void outAStatementlist(AStatementlist node)
    {
        defaultOut(node);
    }

    public void caseAStatementlist(AStatementlist node)
    {
        inAStatementlist(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            Object temp[] = node.getStatements().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStatements) temp[i]).apply(this);
            }
        }
        outAStatementlist(node);
    }

    public void inAStatements(AStatements node)
    {
        defaultIn(node);
    }

    public void outAStatements(AStatements node)
    {
        defaultOut(node);
    }

    public void caseAStatements(AStatements node)
    {
        inAStatements(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStatements(node);
    }
}
